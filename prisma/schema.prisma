
generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String          @id @default(uuid())
  username          String
  email             String          @unique
  password          String
  isVerified        Boolean         @default(false)
  verifyCode        String
  verifyCodeExpiry  DateTime
  image             String?
  accounts          Account[]
  sessions          Session[]
 
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  spaces            Space[]
  questions         Question[]
  testimonials      Testimonial[]
}

model Space {
  id                 String          @id @default(uuid())
  name               String?         @unique
  header             String
  description        String
  userId             String
  user               User           @relation(references: [id], fields: [userId])
  userName           Boolean?
  userEmail          Boolean?
  userSocials        Boolean?
  userAddress        Boolean?
  questions          Question[]
  testimonials       Testimonial[]
}

model Testimonial {
  id                 String        @id @default(uuid())
  review             String
  rating             Int
  isLiked            Boolean       @default(false)
  userName           String?
  userEmail          String?
  userSocials        String?
  userAddress        String?
  spaceId            String
  userId             String
  space              Space         @relation(references: [id], fields: [spaceId])
  user               User          @relation(references: [id], fields: [userId])
}

model Question {
  id                 Int            @id @default(autoincrement())
  message            String
  spaceId            String
  userId             String
  user               User           @relation(references: [id], fields: [userId])
  space              Space          @relation(references: [id], fields: [spaceId])
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
 
  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 